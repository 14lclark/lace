name: 'Python: Build and Test'

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
  pull_request:
    paths:
      - 'lace/**'
      - 'pylace/**'
      - 'book/**'
      - '.github/workflows/python-build-test.yaml'
      - '.github/scripts/run_code_in_mdfile.py'

jobs:
  lint-python:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: pylace
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: "pylace/requirements-lint.txt"
      
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-lint.txt

      - name: Check format (black)
        run: black --check --diff .

      - name: Lint Check (ruff)
        run: ruff --diff .

      - name: Check Minimum Supported Python Version (vermin)
        run: vermin --target=3.8- --no-tips --violations .

  lint-rust:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: pylace

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: . -> pylace/target

      - name: Run rustfmt
        run: cargo fmt --all -- --check

      - name: Run clippy
        env:
          RUSTFLAGS: -C debuginfo=0  # Do not produce debug symbols to keep memory usage down
        run : |
          cargo clippy
      - name: Install audit
        run: cargo install cargo-audit
      - name: Run audit
        working-directory: lace
        # Note: Both `polars` and `arrow2` trigger this security violation
        #       due to their reliance on `chrono`, which is the ultimate source of the violation
        #       as of 2/21/23, no version of `chrono` has been published that fixes the issue
        #       and thus neither `polars` or `arrow2` can pass `audit` checks
        run: cargo audit -f Cargo.lock --ignore RUSTSEC-2020-0071

  linux:
    runs-on: ubuntu-latest
    needs: ["lint-python", "lint-rust"]
    strategy:
      matrix:
        target: [x86_64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pylace/Cargo.toml
          manylinux: auto
    
      - name: Install dev dependencies
        run: |
          pip install --upgrade pip
          pip install -r pylace/requirements-dev.txt

      - name: Install pylace
        run: pip install --find-links dist pylace

      - name: Run Tests
        run: pytest pylace/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    needs: ["lint-python", "lint-rust"]
    strategy:
      matrix:
        target: [x64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pylace/Cargo.toml
    
      - name: Install dev dependencies
        run: |
          pip install --upgrade pip
          pip install -r pylace/requirements-dev.txt

      - name: Install pylace
        run: pip install --find-links dist pylace

      - name: Run Tests
        run: pytest pylace/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    needs: ["lint-python", "lint-rust"]
    strategy:
      matrix:
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter --manifest-path pylace/Cargo.toml
    
      - name: Install dev dependencies
        if: ${{ matrix.target != 'aarch64' }}
        run: |
          pip install --upgrade pip
          pip install -r pylace/requirements-dev.txt

      - name: Install pylace
        if: ${{ matrix.target != 'aarch64' }}
        run: pip install --find-links dist pylace

      - name: Run Tests
        if: ${{ matrix.target != 'aarch64' }}
        run: pytest pylace/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  test-mdbook:
    name: Test MDBook Python Snippets
    runs-on: ubuntu-latest
    needs: [linux]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install codedown
        run: npm install -g codedown

      - name: Install Wheel
        # Install using the direct file name to prevent downloading from PyPi
        # My tests indicate that using --find-links still grabs `pylace` from PyPi
        # unless the version is higher than what is published on PyPi
        run: pip install dist/pylace-*-cp310-cp310-manylinux_*_x86_64.manylinux*_x86_64.whl

      - name: Test MDBook Code Samples (Python)
        env:
          FORCE_COLOR: 1
        run: |
            pip install termcolor
            python3 .github/scripts/run_code_in_mdfile.py directory python book --exclusion-file .github/resources/mdbook_exclusions.txt

  release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/python-v')
    needs: [linux, windows, macos, test-mdbook]
    steps:
      - uses: actions/checkout@v3
      - name: Check Semver
        working-directory: pylace
        env:
          NEW_VERSION: ${{github.ref_name}}
        run: |
          pip install python-yq
          find . -name Cargo.toml -exec tomlq -r .package.version {} \; | xargs -n 1 test $NEW_VERSION =
          find . -name pyproject.toml   -exec tomlq -r .project.version {} \;
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing *
